#ifndef SETTINGS_GPH_
#define SETTINGS_GPH_


/***
<cfgdesc>


[GYRO OPTIONS]
shortdesc = Controller Sensitivity Presets
control = config
item = Pro Controller:#00:00004F50
item = DualSense:#00:0000A900

[SPACE 0]
group = TRUE
control = space
default = 10

[GYRO SENSITIVITY]
group = TRUE
shortdesc = How much to adjust the gyro sensitivity (most people should use the buttons above and set natural sensitivity instead)
byteoffset = 0
bitsize = 32
bitoffset = 0
control = spinboxf
default = 310
minimum = 10
maximum = 3276799
step = 1
decimals = 3
item = Gyro Sensitivity

[SPACE 1]
group = TRUE
control = space
default = 10

[NATURAL SENSITIVITY]
group = TRUE
shortdesc = Natural Sensitivity multiplier
byteoffset = 4
bitsize = 32
bitoffset = 0
control = spinboxf
default = 280
minimum = 1
maximum = 10000
step = 10
decimals = 2
item = Natural Sensitivity





[RUMBLE OPTIONS]
shortdesc = Enable the controller rumble/vibration/force feedback feature
byteoffset = 8
bitsize = 1
bitoffset = 0
control = checkbox
default = 1
item = Enable Rumble



[BOOYAH OPTIONS]
shortdesc = Swap the L and d-pad down inputs (to make it easier to booyah)
byteoffset = 8
bitsize = 1
bitoffset = 1
control = checkbox
default = 0
item = Swap L and D-Pad Down

[SPACE 2]
group = TRUE
control = space
default = 10

[TURBO BOOYAH]
group = TRUE
shortdesc = Make the booyah button a turbo button (rapid entry while holding down the button)
byteoffset = 8
bitsize = 1
bitoffset = 2
control = checkbox
default = 0
item = Turbo Booyah


[SUPER JUMP TO BASE MACRO]
shortdesc = Pressing the left stick will execute the inputs to jump to base
byteoffset = 8
bitsize = 1
bitoffset = 6
control = checkbox
default = 1
item = Left Stick Press to Super Jump to base



[FLICK STICK]
collapsible = 1
shortdesc = Enable Flick Stick for the right stick
byteoffset = 8
bitsize = 1
bitoffset = 3
control = checkbox
default = 0
item = Enable Flick Stick

[SPACE 3]
group = TRUE
control = space
default = 10

[FLICK TIME]
group = TRUE
shortdesc = Time in milliseconds that it takes for a flick to complete
byteoffset = 9
bitsize = 16
bitoffset = 0
control = spinbox
default = 100
minimum = 100
maximum = 2000
step = 1
item = Flick Time (Ms)



[SPACE 4]
group = TRUE
control = space
default = 10

[FORWARD SNAP ANGLE]
group = TRUE
shortdesc = Forward snap angle in degrees for Flick Stick (all inputs within this angle from up on the stick are treated as not being a flick)
byteoffset = 11
bitsize = 8
bitoffset = 0
control = spinbox
default = 10
minimum = 0
maximum = 45
step = 1
item = Forward Snap Angle

[SPACE 5]
group = TRUE
control = space
default = 10

[FLICK THRESHOLD]
group = TRUE
shortdesc = Percentage of stick displacement required before a flick occurs
byteoffset = 12
bitsize = 8
bitoffset = 0
control = spinbox
default = 90
minimum = 50
maximum = 99
step = 1
item = Flick Threshold

[SPACE 6]
group = TRUE
control = space
default = 10

[SPECIAL FLICK DISABLE WINDOW]
group = TRUE
shortdesc = Flick stick will be disabled within this value in milliseconds of using your special. This is used to prevent accidental flicks.
byteoffset = 13
bitsize = 16
bitoffset = 0
control = spinbox
default = 250
minimum = 0
maximum = 500
step = 1
item = Special Flick Disable Window

[SPACE 7]
group = TRUE
control = space
default = 10

[FLICK SENSITIVITY]
group = TRUE
shortdesc = How sensitive flick stick is (only adjust if flick stick angles are consistently off; make sure you're on +5 motion sensitivity in game first)
byteoffset = 15
bitsize = 32
bitoffset = 0
control = spinboxf
default = 22900
minimum = 1
maximum = 3276799
step = 100
decimals = 2
item = Flick Sensitivity

[GYRO OFF BUTTON]
collapsible = 1
shortdesc = Y can be held to suppress gyro/accelerometer input (ratcheting button)
byteoffset = 8
bitsize = 1
bitoffset = 4
control = checkbox
default = 0
item = Gyro Off Button

[SPACE 8]
group = TRUE
control = space
default = 10

[LONG PRESS THRESHOLD]
group = TRUE
shortdesc = How long in milliseconds the Y button needs to be held for it to not count as a press
byteoffset = 19
bitsize = 16
bitoffset = 0
control = spinbox
default = 200
minimum = 1
maximum = 1000
step = 1
item = Long Press Threshold

[SPACE 9]
group = TRUE
control = space
default = 10

[Y PRESS DELAY ENABLED]
group = TRUE
shortdesc = how long to wait before sending a y press on a short press (more laggy y presses, but less need to double press)
byteoffset = 8
bitsize = 1
bitoffset = 5
control = checkbox
default = 0
item = Y press delay

[GYRO AXIS]
shortdesc = which axis to use for in game yaw rotations
byteoffset = 21
bitsize = 8
bitoffset = 0
control=radiobox
default = 0
item = Native/Adaptive
item = Yaw
item = Roll (buggy)


</cfgdesc>

***/

bool rumbleOff = FALSE;
bool booyahSwap = FALSE;
bool booyahTurbo = FALSE;
bool flickStickEnabled = FALSE;
bool superJumpOnLs = TRUE;
bool gyroOffButton = FALSE;

//fine tuned at +5 sens
//procon 
//fix32 gyroMult = .31;
//dualsense
fix32 gyroMult = .66;

//fine tuned at +5 sens
fix32 flickMult = 1900.0;

//plus or minus number of degrees to snap to the forward (0) angle when initializing the flick
fix32 forwardSnapAngleDegrees = 20.0;

fix32 flickThresholdMag = 90.0;
uint16 flickTimeMs = 100;

fix32 turnSmoothThreshold = 0.1;

//in ms how long after a flick before we can flick again
uint32 flickCooldownWindow = 50;

//in ms how long after an R3 input do we block flicks
uint16 r3FlickDisableWindow = 250;

uint16 longPressThreshold = 200;

fix32 zrThresholdPercentage = 50.0;

uint16 yPressDelay = 0;

#define AXIS_NATIVE 0
#define AXIS_YAW 1
#define AXIS_ROLL 2
uint8 gyroAxis;

void initConstants()
{
	pmem_load();
	
	pmem_read(0, &gyroMult);
	fix32 naturalSens = 0.0;
	pmem_read(4, &naturalSens);
	gyroMult *= naturalSens;
	
	rumbleOff = !(pmem_read(8) & 0b1);
	booyahSwap = (pmem_read(8) >> 1) & 0b1;
	booyahTurbo = (pmem_read(8) >> 2) & 0b1;
	flickStickEnabled = (pmem_read(8) >> 3) & 0b1;
	gyroOffButton = (pmem_read(8) >> 4) & 0b1;
	bool yPressDelayOn = (pmem_read(8) >> 5) & 0b1;
	if(yPressDelayOn){
		yPressDelay = 320;
	} else {
		yPressDelay = 0;
	}
	superJumpOnLs = (pmem_read(8) >> 6) & 0b1;
	
	pmem_read(9, &flickTimeMs);
	
	//stored as uint8 but we want fix32
	uint8 angleInt = pmem_read(11);
	forwardSnapAngleDegrees = (fix32) angleInt;
	
	//stored as unit8 but we want fix32
	uint8 flickThresholdInt = pmem_read(12);
	flickThresholdMag = (fix32) flickThresholdInt;
	
	pmem_read(13, &r3FlickDisableWindow);
	
	pmem_read(15, &flickMult);
	
	pmem_read(19, &longPressThreshold);
	
	pmem_read(21, &gyroAxis);
}

#endif