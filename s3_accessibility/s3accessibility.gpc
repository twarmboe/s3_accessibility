#pragma METAINFO("Accessibility Pack for Splatoon 3", 1, 0, "beerSnobbery")

#include "safeprint.gph"
#include "rstick.gph"
#include "flickstick.gph"
#include "settings.gph"
#include "io_sync.gph"
#include <switch.gph>
#include "vector_rotation.gph"


//right stick
fix32 lastAngle = 0.0;
fix32 lastMagnitude = 0.0;

// in radians, keep between pi/2 (90 degrees)
fix32 mockPitch = 0.0;
//we need to calculate each input based on a rerence pitch or we will compound error in our mock
fix32 referencePitch = 0.0;
//the last mock pitch we sent
fix32 lastMockPitch = 0.0;

fix32 normalizedAcc[3] = {0.0, 0.0, 0.0};

const fix32 HALF_PI = PI/2.0;
const fix32 GRAVITY = 25.0;
const fix32 up[3] = {0.0, 0.0, -1.0};

init {
	initConstants();
	
	if(booyahSwap){
		remapper_swap( SWITCH_L , SWITCH_DOWN );
	}
	
	if(rumbleOff){
		ffb_set(FFB_1, 0.0, 100);
		ffb_set(FFB_2, 0.0, 100);
		ffb_set(FFB_3, 0.0, 100);
		ffb_set(FFB_4, 0.0, 100);
	}
	
}

// these reset every time we output data to console
fix32 gyroAccumulatorX = 0.0;
fix32 gyroAccumulatorY = 0.0;
fix32 gyroAccumulatorZ = 0.0;
fix32 flickYawAccumulator = 0.0;

bool blockGyro = FALSE;

main
{
	
	//set_val(SWITCH_ZR, 100.0);
	
	//update values used for synchronization
	updateIO();
	
	if(flickStickEnabled){
		blockRightStick();
	}
	
	if(get_val(SWITCH_ZR) > zrThresholdPercentage){
		set_val(SWITCH_ZR, 100.0);
	} else {
		set_val(SWITCH_ZR, 0.0);
	}
	
	if(outputWasProcessed){
		//reset our accumulators
		gyroAccumulatorX = 0.0;
		gyroAccumulatorY = 0.0;
		gyroAccumulatorZ = 0.0;
		flickYawAccumulator = 0.0;		
	}
	
	if(booyahTurbo){
		if(is_active(SWITCH_DOWN)) combo_run(turboBooyah);
		if(event_release(SWITCH_DOWN)) combo_stop(turboBooyah);
	}
	
	
	if(superJumpOnLs && event_active(SWITCH_LS)) combo_run(JumpToBase);
	
	fix32 accX = get_val(ACCEL_1_X);
	fix32 accY = get_val(ACCEL_1_Y);
	fix32 accZ = get_val(ACCEL_1_Z);
	fix32 accMag = sqrt(sq(accX) + sq(accY) + sq(accZ));
	fix32 accPitch = atan2(-accY, -accZ) * accelerometerMult;
	
	
	if(gyroOffButton && event_active(SWITCH_Y)){
		
		blockGyro = TRUE;
		
	} else if(gyroOffButton && event_release(SWITCH_Y)) {
		blockGyro = FALSE;
		referencePitch = accPitch - lastMockPitch;
		
		if(time_active(SWITCH_Y) <= longPressThreshold){
			combo_run(CameraReset);
			referencePitch = 0.0;			
		}
	}
	
	if(gyroOffButton && is_active(SWITCH_Y)){
		set_val(SWITCH_Y, 0.0);	
	}
	

	if(!blockGyro) {
	    //calculate our new pitch and keep it in bounds
		mockPitch = accPitch - referencePitch;
		mockPitch = clamp(mockPitch, -HALF_PI, HALF_PI); // weird stuff happens when controller upside down
	}
	
	
	uint32 dt = elapsed_time();
	
	//can only update flickstick values if measurable time has elapsed
	if(flickStickEnabled && dt > 0) {
		fix32 rsAngle = rightStickAngle();
		fix32 magnitude = rightStickMagnitude();
		
		fix32 flickAmount = handleFlickStick(lastAngle, lastMagnitude, rsAngle, magnitude, dt);
		
		lastAngle = rsAngle;
		lastMagnitude = magnitude;
	
		flickYawAccumulator += (flickAmount * flickMult);	  
	}
	
	//add any new inputs to be averaged until next output
	if(inputIsNew){
		gyroAccumulatorX += get_actual(GYRO_1_X) * gyroMult * verticalMult;
		gyroAccumulatorY += get_actual(GYRO_1_Y) * gyroMult;
		gyroAccumulatorZ += get_actual(GYRO_1_Z) * gyroMult;
	}	
	
	lastMockPitch = mockPitch; //keep track for future inputs
	
	//calculate and output accelerometer data based on our mock pitch
	normalizedAcc[0] = 0.0;
	normalizedAcc[1] = -sin(mockPitch);
	normalizedAcc[2] = -cos(mockPitch);
		
	set_val(SWITCH_ACCX, normalizedAcc[0] * GRAVITY);
	set_val(SWITCH_ACCY, normalizedAcc[1] * GRAVITY);
	set_val(SWITCH_ACCZ, normalizedAcc[2] * GRAVITY);
	
	//average our gyro data and apply our flick based on the normalized mock accelerometer data
	fix32 avgGyro[3] = {0.0, 0.0, 0.0};
	avgGyro[0] = get_actual(SWITCH_GYROX) * gyroMult * verticalMult;
	avgGyro[1] = get_actual(SWITCH_GYROY) * gyroMult;
	avgGyro[2] = get_actual(SWITCH_GYROZ) * gyroMult;
	
	if(inputsSinceLast > 0){
		avgGyro[0] = gyroAccumulatorX / (fix32) inputsSinceLast;
		avgGyro[1] = gyroAccumulatorY / (fix32) inputsSinceLast;
		avgGyro[2] = gyroAccumulatorZ / (fix32) inputsSinceLast;
	}
	
	fix32 gyroAxisRotation[4] = {1.0, 0.0, 0.0, 0.0};
	
	if(gyroAxis == AXIS_YAW){
		avgGyro[1] = 0.0;
	} else if(gyroAxis == AXIS_ROLL){
		avgGyro[2] = avgGyro[1];
		avgGyro[1] = 0.0;
	} else { 
		//adaptive
		fix32 actualAcc[3] = {0.0, 0.0, 0.0};
		actualAcc[0] = get_actual(SWITCH_ACCX);
		actualAcc[1] = get_actual(SWITCH_ACCY);
		actualAcc[2] = get_actual(SWITCH_ACCZ);
		fix32 actualAccMagnitude = sqrt(sq(actualAcc[0]) + sq(actualAcc[1]) + sq(actualAcc[2]));
		//need to normalize for rotation between to work
		actualAcc[0] /= actualAccMagnitude;
		actualAcc[1] /= actualAccMagnitude;
		actualAcc[2] /= actualAccMagnitude;
		
		//Quaternion_rotationBetween(ARG(normalizedAcc), ARG(actualAcc), ARG(gyroAxisRotation));
		Quaternion_rotationBetween(ARG(actualAcc), ARG(normalizedAcc), ARG(gyroAxisRotation));
		Quaternion_rotate(ARG(gyroAxisRotation), ARG(avgGyro), ARG(avgGyro));
	}
	
	if(gyroAxis != AXIS_ADAPTIVE){
		
		Quaternion_rotationBetween(ARG(up), ARG(normalizedAcc), ARG(gyroAxisRotation));
		Quaternion_rotate(ARG(gyroAxisRotation), ARG(avgGyro), ARG(avgGyro));
	}
	
	if(blockGyro){ 
		avgGyro[0] = 0.0;
		avgGyro[1] = 0.0;
		avgGyro[2] = 0.0;
	}
	
	fix32 newX = avgGyro[0] + (flickYawAccumulator * -normalizedAcc[0]);
	fix32 newY = avgGyro[1] + (flickYawAccumulator * -normalizedAcc[1]);
	fix32 newZ = avgGyro[2] + (flickYawAccumulator * -normalizedAcc[2]);
	
	set_val(SWITCH_GYROX, newX);
	set_val(SWITCH_GYROY, newY);
	set_val(SWITCH_GYROZ, newZ);
	
	
	//dumb 360 lol
	//if(event_active(BUTTON_15)){
	//	combo_run(Spin);
	//}
	
	//dumb bamboo 360 lol
	//if(event_release(BUTTON_5)){
	//	combo_run(ShootSpin);
	//}
}

combo turboBooyah
{
	set_val(SWITCH_DOWN, 100);
	wait(40);
	set_val(SWITCH_DOWN, 0);
	wait(40);
}

combo JumpToBase
{
	set_val(SWITCH_X, 100);
	wait(50);
	set_val(SWITCH_DOWN, 100);
	wait(50);
	set_val(SWITCH_A, 100);
	wait(50);
	set_val(SWITCH_X, 0);
	set_val(SWITCH_DOWN, 0);
	set_val(SWITCH_A, 0);
}

combo CameraReset
{
	set_val(SWITCH_Y, 100);
	wait(20);
	set_val(SWITCH_Y, 0);
}

/*
//do a 360 @ +5 sens
combo Spin 
{
	set_val(GYRO_1_X, normalizedAcc[0] * 60.0);
	set_val(GYRO_1_Y, normalizedAcc[1] * 60.0);
	set_val(GYRO_1_Z, normalizedAcc[2] * 60.0);
	wait(200);
}


combo ShootSpin 
{
	wait(20);
	set_val(GYRO_1_X, normalizedAcc[0] * 60.0);
	set_val(GYRO_1_Y, normalizedAcc[1] * 60.0);
	set_val(GYRO_1_Z, normalizedAcc[2] * 60.0);
	wait(100);
	set_val(SWITCH_ZR, 100.0);
	set_val(GYRO_1_X, normalizedAcc[0] * 60.0);
	set_val(GYRO_1_Y, normalizedAcc[1] * 60.0);
	set_val(GYRO_1_Z, normalizedAcc[2] * 60.0);
	wait(100);
	set_val(SWITCH_ZR, 100.0);
	wait(50);
	set_val(SWITCH_ZR, 0);
	wait(20);
}
*/