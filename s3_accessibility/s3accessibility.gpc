#pragma METAINFO("gyrotest", 1, 0, "beerSnobbery")

#include "safeprint.gph"
#include "rstick.gph"
#include "flickstick.gph"
#include "settings.gph"
#include "io_sync.gph"
#include <switch.gph>

fix32 lastAngle = 0.0;
fix32 lastMagnitude = 0.0;

fix32 normalizedAccX = 0.0;
fix32 normalizedAccY = 0.0;
fix32 normalizedAccZ = 0.0;

init {
	initConstants();
	
	if(booyahSwap){
		remapper_swap( SWITCH_L , SWITCH_DOWN );
	}
	
	if(rumbleOff){
		ffb_set(FFB_1, 0.0, 100);
		ffb_set(FFB_2, 0.0, 100);
		ffb_set(FFB_3, 0.0, 100);
		ffb_set(FFB_4, 0.0, 100);
	}
	
}

// these reset every time we output data to console
fix32 gyroAccumulatorX = 0.0;
fix32 gyroAccumulatorY = 0.0;
fix32 gyroAccumulatorZ = 0.0;
fix32 flickYawAccumulator = 0.0;

main
{
	//set_val(SWITCH_ZR, 100.0);
	updateIO();	
	blockRightStick();
	
	if(get_val(SWITCH_ZR) > zrThresholdPercentage){
		set_val(SWITCH_ZR, 100.0);
	} else {
		set_val(SWITCH_ZR, 0.0);
	}
	
	if(outputWasProcessed){
		//reset our accumulators
		gyroAccumulatorX = 0.0;
		gyroAccumulatorY = 0.0;
		gyroAccumulatorZ = 0.0;
		flickYawAccumulator = 0.0;		
	}
	
	if(booyahTurbo){
		if(is_active(SWITCH_DOWN)) combo_run(turboBooyah);
		if(event_release(SWITCH_DOWN)) combo_stop(turboBooyah);
	}
	
	
	if(superJumpOnLs && event_active(SWITCH_LS)) combo_run(JumpToBase);
	
	fix32 accX = get_val(ACCEL_1_X);
	fix32 accY = get_val(ACCEL_1_Y);
	fix32 accZ = get_val(ACCEL_1_Z);
	fix32 accMag = sqrt(sq(accX) + sq(accY) + sq(accZ));
	
	normalizedAccX = -accX/accMag;
	normalizedAccY = -accY/accMag;
	normalizedAccZ = -accZ/accMag;
	
	
	uint32 dt = elapsed_time();
	
	//hack for now, if we can't tell how much time has elapsed
    //then we don't run the flickstick calc just use our previous value
	if(dt > 0) {
		fix32 angle = rightStickAngle();
		fix32 magnitude = rightStickMagnitude();
		
		fix32 flickAmount = handleFlickStick(lastAngle, lastMagnitude, angle, magnitude, dt);
		
		lastAngle = angle;
		lastMagnitude = magnitude;
	
		flickYawAccumulator += (flickAmount * flickMult);	  
	}
	
	//apply our flick based on the normalized accelerometer
	if(inputIsNew){
		gyroAccumulatorX += get_actual(GYRO_1_X) * gyroMult * naturalSensitivity;
		gyroAccumulatorY += get_actual(GYRO_1_Y) * gyroMult * naturalSensitivity;
		gyroAccumulatorZ += get_actual(GYRO_1_Z) * gyroMult * naturalSensitivity;
	}

/*	
	//TODO: temp for testing
	gyroAccumulatorX = 0.0;
	gyroAccumulatorY = 0.0;
	gyroAccumulatorZ = 0.0;
	*/
	
	fix32 avgX = get_actual(GYRO_1_X);
	if(inputsSinceLast > 0){
		avgX = gyroAccumulatorX / (fix32) inputsSinceLast;
	}
	fix32 newX = gyroAccumulatorX + (flickYawAccumulator * normalizedAccX);
	set_val(GYRO_1_X, newX);
	
	fix32 avgY = get_actual(GYRO_1_Y);
	if(inputsSinceLast > 0){
		avgY = gyroAccumulatorY / (fix32) inputsSinceLast;
	}
	fix32 newY = gyroAccumulatorY + (flickYawAccumulator * normalizedAccY);
	set_val(GYRO_1_Y, newY);
	
	fix32 avgZ = get_actual(GYRO_1_Z);
	if(inputsSinceLast > 0){
		avgZ = gyroAccumulatorZ / (fix32) inputsSinceLast;
	}
	fix32 newZ = gyroAccumulatorZ + (flickYawAccumulator * normalizedAccZ);
	set_val(GYRO_1_Z, newZ);
	
	//dumb 360 lol
	//if(event_active(BUTTON_15)){
	//	combo_run(Spin);
	//}
	
	//dumb bamboo 360 lol
	//if(event_release(BUTTON_5)){
	//	combo_run(ShootSpin);
	//}
}

combo turboBooyah
{
	set_val(SWITCH_DOWN, 100);
	wait(40);
	set_val(SWITCH_DOWN, 0);
	wait(40);
}

combo JumpToBase
{
	set_val(SWITCH_X, 100);
	wait(50);
	set_val(SWITCH_DOWN, 100);
	wait(50);
	set_val(SWITCH_A, 100);
	wait(50);
	set_val(SWITCH_X, 0);
	set_val(SWITCH_DOWN, 0);
	set_val(SWITCH_A, 0);
}

//do a 360 @ +5 sens
combo Spin 
{
	set_val(GYRO_1_X, normalizedAccX * 60.0);
	set_val(GYRO_1_Y, normalizedAccY * 60.0);
	set_val(GYRO_1_Z, normalizedAccZ * 60.0);
	wait(200);
}


combo ShootSpin 
{
	wait(20);
	set_val(GYRO_1_X, normalizedAccX * 60.0);
	set_val(GYRO_1_Y, normalizedAccY * 60.0);
	set_val(GYRO_1_Z, normalizedAccZ * 60.0);
	wait(100);
	set_val(SWITCH_ZR, 100.0);
	set_val(GYRO_1_X, normalizedAccX * 60.0);
	set_val(GYRO_1_Y, normalizedAccY * 60.0);
	set_val(GYRO_1_Z, normalizedAccZ * 60.0);
	wait(100);
	set_val(SWITCH_ZR, 100.0);
	wait(50);
	set_val(SWITCH_ZR, 0);
	wait(20);
}